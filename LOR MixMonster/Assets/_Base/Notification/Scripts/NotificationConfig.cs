using System;
using System.Collections.Generic;
using UnityEngine;

namespace Base.Notification
{
    [CreateAssetMenu(fileName = "NotificationConfig", menuName = "Base/NotificationConfig")]
    public class NotificationConfig : ScriptableObject
    {
        public List<NotificationData> notifications = new List<NotificationData>();

        private readonly List<string> symbolIcons = new List<string>
        {
            "üéÅ", "‚è∞", "üéâ", "üéä", "üéÄ", "üéØ", "üéÆ", "üèÜ",
        };

        public string GetRandomIcon()
        {
            try
            {
                return this.symbolIcons[UnityEngine.Random.Range(0, this.symbolIcons.Count)];
            }
            catch (Exception e)
            {
                Debug.LogError("[Notification] Error " + e);
                return "";
            }
        }
    }

    [Serializable]
    public class NotificationData
    {
        public string title;
        public string message;
        public NotificationType type;
        public NotificationTime time;

        public DateTime GetFireTimeFromNow()
        {
            // N·∫øu mu·ªën b·∫Øn th√¥ng b√°o sau khi tho√°t game: add th·ªùi gian t√≠nh t·ª´ D√¢tetime.Now
            // N·∫øu mu·ªën b·∫Øn th√¥ng b√°o v√†o 1 th·ªùi ƒëi·ªÉm c·ªë ƒë·ªãnh trong ng√†y: add th·ªùi gian t√≠nh t·ª´ DateTime.Today
            var fireTime = this.type switch
            {
                NotificationType.AfterExitingGame => DateTime.Now.AddDays(this.time.day).AddHours(this.time.hour).AddMinutes(this.time.minute).AddSeconds(this.time.second),
                NotificationType.DailyTime => DateTime.Today.AddHours(this.time.hour).AddMinutes(this.time.minute).AddSeconds(this.time.second),
                _ => DateTime.Now.AddDays(1)
            };

            // Tr√°nh notify t·ª´ 23h ƒë√™m ƒë·∫øn 9h s√°ng (n·∫øu kh√¥ng ph·∫£i notification ngay sau khi tho√°t game v√†i 1 v√†i ph√∫t)
            if ((fireTime.Hour >= 23 || fireTime.Hour <= 9) && (fireTime - DateTime.Now).TotalMinutes >= 5)
                fireTime = fireTime.AddHours(10);

            // N·∫øu fireTime d√£ qua, t·∫°i th·ªùi ƒëi·ªÉm schedule notifications n√≥ s·∫Ω b·ªã b·∫Øn ngay l·∫≠p t·ª©c
            // V√¨ v·∫≠y th√™m 1 ng√†y ƒë·ªÉ b·∫Øn v√†o khung gi·ªù ƒë√≥ ng√†y h√¥m sau
            if (fireTime < DateTime.Now)
                fireTime = fireTime.AddDays(1);

            return fireTime;
        }

        public enum NotificationType
        {
            AfterExitingGame,
            DailyTime,
        }

        [Serializable]
        public class NotificationTime
        {
            public int day;
            public int hour;
            public int minute;
            public int second;
        }
    }
}

// "ü§©", "ü•≥", "ü§ó", "ü§≠", "ü§´", "ü§î", "ü§ê", "ü§®", "üòê", "üòë", "üò∂", "üòè", "üòí", "üôÑ", "üò¨", "ü§•",
// "ü§´", "ü§≠", "üßê", "ü§ì", "üòé", "ü•∏", "ü§°", "ü§†", "ü§ó", "ü§©", "ü•≥", "üòè", "üòí", "üòû", "üòî", "üòü",
// "üòï", "üôÅ", "‚òπÔ∏è", "üò£", "üòñ", "üò´", "üò©", "ü•∫", "üò¢", "üò≠", "üò§", "üò†", "üò°", "ü§¨", "ü§Ø", "üò≥",
// "ü•µ", "ü•∂", "üò±", "üò®", "üò∞", "üò•", "üòì", "ü§ó", "ü§î", "ü§≠", "ü§´", "ü§•", "üò∂", "üòê", "üòë", "üò¨",
// "üôÑ", "üòØ", "üò¶", "üòß", "üòÆ", "üò≤", "ü•±", "üò¥", "ü§§", "üò™", "üòµ", "ü§ê", "ü•¥", "ü§¢", "ü§Æ", "ü§ß",